from tkinter import *
from logic.Integral import *

class Keyboard(Frame):
    def __init__(self, function, dif, limit1, limit2, result):
        super().__init__()
        self.configure(bg="#EEEEEE")
        self.function = function
        self.dif = dif
        self.limit1 = limit1
        self.limit2 = limit2
        self.result = result
        self.numButton1 = Button(self, text="1", bg="white", fg="black", bd=0, command=lambda:self.write("1"))
        self.numButton2 = Button(self, text="2", bg="white", fg="black", bd=0, command=lambda:self.write("2"))
        self.numButton3 = Button(self, text="3", bg="white", fg="black", bd=0, command=lambda:self.write("3"))
        self.numButton4 = Button(self, text="4", bg="white", fg="black", bd=0, command=lambda:self.write("4"))
        self.numButton5 = Button(self, text="5", bg="white", fg="black", bd=0, command=lambda:self.write("5"))
        self.numButton6 = Button(self, text="6", bg="white", fg="black", bd=0, command=lambda:self.write("6"))
        self.numButton7 = Button(self, text="7", bg="white", fg="black", bd=0, command=lambda:self.write("7"))
        self.numButton8 = Button(self, text="8", bg="white", fg="black", bd=0, command=lambda:self.write("8"))
        self.numButton9 = Button(self, text="9", bg="white", fg="black", bd=0, command=lambda:self.write("9"))
        self.numButton0 = Button(self, text="0", bg="white", fg="black", bd=0, command=lambda:self.write("0"))
        self.naturalLogarithm = Button(self, text="ln(", bg="white", fg="black", bd=0, command=lambda:self.write("log(, E)"))
        self.logarithm = Button(self, text="log(", bg="white", fg="black", bd=0, command=lambda:self.write("log(, 10)"))
        self.openParentesis = Button(self, text="(", bg="white", fg="black", bd=0, command=lambda:self.write("("))
        self.closeParentesis = Button(self, text=")", bg="white", fg="black", bd=0, command=lambda:self.write(")"))
        self.openCorchete = Button(self, text="[", bg="white", fg="black", bd=0, command=lambda:self.write("["))
        self.closeCorchete = Button(self, text="]", bg="white", fg="black", bd=0, command=lambda:self.write("]"))
        self.plus = Button(self, text="+", bg="white", fg="black", bd=0, command=lambda:self.write("+"))
        self.minus = Button(self, text="-", bg="white", fg="black", bd=0, command=lambda:self.write("-"))
        self.multiply = Button(self, text="*", bg="white", fg="black", bd=0, command=lambda:self.write("*"))
        self.divide = Button(self, text="/", bg="white", fg="black", bd=0, command=lambda:self.write("/"))
        self.deleteButton = Button(self, text="DEL", bg="white", fg="black", bd=0, command=lambda:self.deleteText())
        self.clearButton = Button(self, text="AC", bg="white", fg="black", bd=0, command=lambda:self.clear())
        self.equal = Button(self, text="=", bg="blue", fg="white", bd=0, command=lambda:self.solve())
        self.square = Button(self, text="x²", bg="white", fg="black", bd=0, command=lambda:self.write("**2"))
        self.piButton = Button(self, text="π", bg="white", fg="black", bd=0, command=lambda:self.write("pi"))
        self.eulerButton = Button(self, text="e", bg="white", fg="black", bd=0, command=lambda:self.write("E"))
        self.elevButton = Button(self, text="x^n", bg="white", fg="black", bd=0, command=lambda:self.write("**"))
        self.leftArrowButton = Button(self, text="←", bg="black", fg="white", bd=0, command=lambda:self.cursor("left"))
        self.rightArrowButton = Button(self, text="→", bg="black", fg="white", bd=0, command=lambda:self.cursor("right"))
        self.sinusButton = Button(self, text="sin(", bg="white", fg="black", bd=0, command=lambda:self.write("sin("))
        self.cosinusButton = Button(self, text="cos(", bg="white", fg="black", bd=0, command=lambda:self.write("cos("))
        self.tangentButton = Button(self, text="tan(", bg="white", fg="black", bd=0, command=lambda:self.write("tan("))
        self.cotangentButton = Button(self, text="cot(", bg="white", fg="black", bd=0, command=lambda:self.write("cot("))
        self.secButton = Button(self, text="sec(", bg="white", fg="black", bd=0, command=lambda:self.write("sec("))
        self.cscButton = Button(self, text="csc(", bg="white", fg="black", bd=0, command=lambda:self.write("csc("))
        self.sinhButton = Button(self, text="sinh(", bg="white", fg="black", bd=0, command=lambda:self.write("sinh("))
        self.coshButton = Button(self, text="cosh(", bg="white", fg="black", bd=0, command=lambda:self.write("cosh("))
        self.tanhButton = Button(self, text="tanh(", bg="white", fg="black", bd=0, command=lambda:self.write("tanh("))
        self.cothButton = Button(self, text="coth(", bg="white", fg="black", bd=0, command=lambda:self.write("coth("))
        self.sechButton = Button(self, text="sech(", bg="white", fg="black", bd=0, command=lambda:self.write("sech("))
        self.cschButton = Button(self, text="csch(", bg="white", fg="black", bd=0, command=lambda:self.write("csch("))
        self.expButton = Button(self, text="e^(", bg="white", fg="black", bd=0, command=lambda:self.write("E**("))
        self.absButton = Button(self, text="|x|", bg="white", fg="black", bd=0, command=lambda:self.write("Abs("))
        self.sqrtButton = Button(self, text="√x", bg="white", fg="black", bd=0, command=lambda:self.write("sqrt("))
        self.arcsinusButton = Button(self, text="arcsin(", bg="white", fg="black", bd=0, command=lambda:self.write("asin("))
        self.arccosinusButton = Button(self, text="arccos(", bg="white", fg="black", bd=0, command=lambda:self.write("acos"))
        self.arctangentButton = Button(self, text="arctan(", bg="white", fg="black", bd=0, command=lambda:self.write("atan("))
        self.arcsecButton = Button(self, text="arcsec(", bg="white", fg="black", bd=0, command=lambda:self.write("asec"))
        self.arccscButton = Button(self, text="arccsc(", bg="white", fg="black", bd=0, command=lambda:self.write("acsc("))
        self.arccotButton = Button(self, text="arccot(", bg="white", fg="black", bd=0, command=lambda:self.write("acot("))
        self.arcsinhButton = Button(self, text="arcsinh(", bg="white", fg="black", bd=0, command=lambda:self.write("asinh("))
        self.arccoshButton = Button(self, text="arccosh(", bg="white", fg="black", bd=0, command=lambda:self.write("acosh("))
        self.arctanhButton = Button(self, text="arctanh(", bg="white", fg="black", bd=0, command=lambda:self.write("atanh("))
        self.arccothButton = Button(self, text="arccoth(", bg="white", fg="black", bd=0, command=lambda:self.write("acoth("))
        self.arcsechButton = Button(self, text="arcsech(", bg="white", fg="black", bd=0, command=lambda:self.write("asech("))
        self.arccschButton = Button(self, text="arccsch(", bg="white", fg="black", bd=0, command=lambda:self.write("acsch("))
        self.xButton = Button(self, text="x", bg="black", fg="white", bd=0, command=lambda:self.write("x"))
        self.yButton = Button(self, text="y", bg="black", fg="white", bd=0, command=lambda:self.write("y"))
        self.thetaButton = Button(self, text="θ", bg="black", fg="white", bd=0, command=lambda:self.write("θ"))
        self.columnconfigure(index=0, weight=1)
        self.columnconfigure(index=1, weight=1)
        self.columnconfigure(index=2, weight=1)
        self.columnconfigure(index=3, weight=1)
        self.columnconfigure(index=4, weight=1)
        self.columnconfigure(index=5, weight=1)
        self.columnconfigure(index=6, weight=1)
        self.columnconfigure(index=7, weight=1)
        self.columnconfigure(index=8, weight=1)
        self.columnconfigure(index=9, weight=1)
        self.columnconfigure(index=10, weight=1)
        self.columnconfigure(index=11, weight=1)
        self.rowconfigure(index=0, weight=1)
        self.rowconfigure(index=1, weight=1)
        self.rowconfigure(index=2, weight=1)
        self.rowconfigure(index=3, weight=1)
        self.rowconfigure(index=4, weight=1)
        self.numButton1.grid(column=0, row=0, sticky=NSEW, padx=5, pady=5)
        self.numButton2.grid(column=1, row=0, sticky=NSEW, padx=5, pady=5)
        self.numButton3.grid(column=2, row=0, sticky=NSEW, padx=5, pady=5)
        self.numButton4.grid(column=0, row=1, sticky=NSEW, padx=5, pady=5)
        self.numButton5.grid(column=1, row=1, sticky=NSEW, padx=5, pady=5)
        self.numButton6.grid(column=2, row=1, sticky=NSEW, padx=5, pady=5)
        self.numButton7.grid(column=0, row=2, sticky=NSEW, padx=5, pady=5)
        self.numButton8.grid(column=1, row=2, sticky=NSEW, padx=5, pady=5)
        self.numButton9.grid(column=2, row=2, sticky=NSEW, padx=5, pady=5)
        self.numButton0.grid(column=0, row=3, sticky=NSEW, padx=5, pady=5)
        self.leftArrowButton.grid(column=1, row=3, sticky=NSEW, padx=5, pady=5)
        self.rightArrowButton.grid(column=2, row=3, sticky=NSEW, padx=5, pady=5)
        self.piButton.grid(column=0, row=4, sticky=NSEW, padx=5, pady=5)
        self.eulerButton.grid(column=1, row=4, sticky=NSEW, padx=5, pady=5)
        self.square.grid(column=2, row=4, sticky=NSEW, padx=5, pady=5)
        self.plus.grid(column=3, row=0, sticky=NSEW, padx=5, pady=5)
        self.minus.grid(column=3, row=1, sticky=NSEW, padx=5, pady=5)
        self.multiply.grid(column=3, row=2, sticky=NSEW, padx=5, pady=5)
        self.divide.grid(column=3, row=3, sticky=NSEW, padx=5, pady=5)
        self.elevButton.grid(column=3, row=4, sticky=NSEW, padx=5, pady=5)
        self.openParentesis.grid(column=4, row=0, sticky=NSEW, padx=5, pady=5)
        self.closeParentesis.grid(column=4, row=1, sticky=NSEW, padx=5, pady=5)
        self.openCorchete.grid(column=4, row=2, sticky=NSEW, padx=5, pady=5)
        self.closeCorchete.grid(column=4, row=3, sticky=NSEW, padx=5, pady=5)
        self.naturalLogarithm.grid(column=4, row=4, sticky=NSEW, padx=5, pady=5)
        self.logarithm.grid(column=5, row=0, sticky=NSEW, padx=5, pady=5)
        self.deleteButton.grid(column=5, row=1, sticky=NSEW, padx=5, pady=5)
        self.clearButton.grid(column=5, row=2, sticky=NSEW, padx=5, pady=5)
        self.equal.grid(column=5, row=3, sticky=NSEW, padx=5, pady=5, rowspan=2)
        self.sinusButton.grid(column=6, row=0, sticky=NSEW, padx=5, pady=5)
        self.cosinusButton.grid(column=6, row=1, sticky=NSEW, padx=5, pady=5)
        self.tangentButton.grid(column=6, row=2, sticky=NSEW, padx=5, pady=5)
        self.sinhButton.grid(column=6, row=3, sticky=NSEW, padx=5, pady=5)
        self.coshButton.grid(column=6, row=4, sticky=NSEW, padx=5, pady=5)
        self.tanhButton.grid(column=7, row=0, sticky=NSEW, padx=5, pady=5)
        self.secButton.grid(column=7, row=1, sticky=NSEW, padx=5, pady=5)
        self.cscButton.grid(column=7, row=2, sticky=NSEW, padx=5, pady=5)
        self.cotangentButton.grid(column=7, row=3, sticky=NSEW, padx=5, pady=5)
        self.sechButton.grid(column=7, row=4, sticky=NSEW, padx=5, pady=5)
        self.cschButton.grid(column=8, row=0, sticky=NSEW, padx=5, pady=5)
        self.cothButton.grid(column=8, row=1, sticky=NSEW, padx=5, pady=5)
        self.expButton.grid(column=8, row=2, sticky=NSEW, padx=5, pady=5)
        self.absButton.grid(column=8, row=3, sticky=NSEW, padx=5, pady=5)
        self.sqrtButton.grid(column=8, row=4, sticky=NSEW, padx=5, pady=5)
        self.arcsinusButton.grid(column=9, row=0, sticky=NSEW, padx=5, pady=5)
        self.arccosinusButton.grid(column=9, row=1, sticky=NSEW, padx=5, pady=5)
        self.arctangentButton.grid(column=9, row=2, sticky=NSEW, padx=5, pady=5)
        self.arcsinhButton.grid(column=9, row=3, sticky=NSEW, padx=5, pady=5)
        self.arccoshButton.grid(column=9, row=4, sticky=NSEW, padx=5, pady=5)
        self.arctanhButton.grid(column=10, row=0, sticky=NSEW, padx=5, pady=5)
        self.arcsecButton.grid(column=10, row=1, sticky=NSEW, padx=5, pady=5)
        self.arccscButton.grid(column=10, row=2, sticky=NSEW, padx=5, pady=5)
        self.arccotButton.grid(column=10, row=3, sticky=NSEW, padx=5, pady=5)
        self.arcsechButton.grid(column=10, row=4, sticky=NSEW, padx=5, pady=5)
        self.arccschButton.grid(column=11, row=0, sticky=NSEW, padx=5, pady=5)
        self.arccothButton.grid(column=11, row=1, sticky=NSEW, padx=5, pady=5)
        self.xButton.grid(column=11, row=2, sticky=NSEW, padx=5, pady=5)
        self.yButton.grid(column=11, row=3, sticky=NSEW, padx=5, pady=5)
        self.thetaButton.grid(column=11, row=4, sticky=NSEW, padx=5, pady=5)

    def write(self, value):
        current_entry = self.focus_get()
        if current_entry:
            cursor_position = current_entry.index(INSERT)
            current_entry.insert(cursor_position, value)
        return

    def cursor(self, direction):
        current_entry = self.focus_get()
        if current_entry:
            cursor_position = current_entry.index(INSERT)
            if direction == "left":
                current_entry.icursor(cursor_position - 1)
            elif direction == "right":
                current_entry.icursor(cursor_position + 1)
        return

    def deleteText(self):
        current_entry = self.focus_get()
        if current_entry:
            cursor_position = current_entry.index(INSERT)
            if cursor_position > 0:
                current_entry.delete(cursor_position - 1)
        return

    def clear(self):
        current_entry = self.focus_get()
        if current_entry:
            cursor_position = current_entry.index(INSERT)
            if cursor_position > 0:
                current_entry.delete(0, END)
        return

    def solve(self):
        if self.limit1.get() == '' and self.limit2.get() == '':
            integral = Integral(self.function.get(), 0.0, 0.0, self.dif.get())
            self.result.configure(text=integral.integrar())
        else:
            integral = Integral(self.function.get(), self.limit1.get(), self.limit2.get(), self.dif.get())
            self.result.configure(text=integral.integrarDefinida())